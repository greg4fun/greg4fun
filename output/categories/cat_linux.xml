<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Greg's Tech Notes (Posts about Linux)</title><link>https://stencel.io/</link><description></description><atom:link href="https://stencel.io/categories/cat_linux.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:gstencel@gmail.com"&gt;Greg Stencel&lt;/a&gt; </copyright><lastBuildDate>Sun, 28 Jun 2020 20:33:00 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Linux diplay size of each subdirectory</title><link>https://stencel.io/posts/linux-diplay-size-of-each-subdirectory.html</link><dc:creator>Greg Stencel</dc:creator><description>&lt;div&gt;&lt;p&gt;To display total size of each subdirectory&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_adc96efe997b4ec8ac06358516003878-1"&gt;&lt;/a&gt;du -sh *
&lt;/pre&gt;&lt;p&gt;-h human readable displays MB and GB instead of milions and bilions of bytes :)
-s summarize total size of dir&lt;/p&gt;&lt;/div&gt;</description><category>bash</category><category>Linux</category><guid>https://stencel.io/posts/linux-diplay-size-of-each-subdirectory.html</guid><pubDate>Tue, 01 Jul 2014 12:31:07 GMT</pubDate></item><item><title>ssh reverse tunneling</title><link>https://stencel.io/posts/ssh-reverse-tunneling.html</link><dc:creator>Greg Stencel</dc:creator><description>&lt;div&gt;&lt;p&gt;When you want someone to connect to your NAT-ed or Firewalled server and&lt;/p&gt;
&lt;p&gt;you run out of ideas ond options or you even dont have&lt;/p&gt;
&lt;p&gt;you dont have access to Firewall or VPN server to configure&lt;/p&gt;
&lt;p&gt;anything - you can always try to use reverse ssh tunnel.&lt;/p&gt;
&lt;p&gt;The only one condition is that you must be able to ssh from your server to public host( the one other guy wants to connect)&lt;/p&gt;
&lt;p&gt;This is how it works:&lt;/p&gt;
&lt;p&gt;[Server]  &amp;lt;----&amp;gt; [ FIREWALL/NAT SERVER ] &amp;lt;----&amp;gt; [ BOB HOST with public ip 80.80.80.80]&lt;/p&gt;&lt;/div&gt;</description><category>Linux</category><category>reverse ssh tunnel</category><category>ssh</category><guid>https://stencel.io/posts/ssh-reverse-tunneling.html</guid><pubDate>Mon, 16 Jun 2014 15:07:02 GMT</pubDate></item><item><title>List all users crontab jobs</title><link>https://stencel.io/posts/list-all-users-crontab-jobs.html</link><dc:creator>Greg Stencel</dc:creator><description>&lt;pre class="code bash"&gt;&lt;a name="rest_code_0015819660534c3aa6904a3074ef11d9-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; usr in &lt;span class="k"&gt;$(&lt;/span&gt;cut -f1 -d: /etc/passwd&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$usr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; crontab -u &lt;span class="nv"&gt;$usr&lt;/span&gt; -l&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;</description><category>Linux</category><guid>https://stencel.io/posts/list-all-users-crontab-jobs.html</guid><pubDate>Mon, 19 May 2014 11:50:10 GMT</pubDate></item><item><title>Linux suspended jobs</title><link>https://stencel.io/posts/linux-suspended-jobs.html</link><dc:creator>Greg Stencel</dc:creator><description>&lt;div&gt;&lt;p&gt;If you suspended job by accident with ctrl+z you can always resume by fg here more examples:&lt;/p&gt;
&lt;kbd&gt;crtl&lt;/kbd&gt;&lt;kbd&gt;z&lt;/kbd&gt; suspend&lt;br&gt;

jobs - list the current jobs&lt;br&gt;

fg - resume the job that's next in the queue&lt;br&gt;
fg %[number] - resume job [number]&lt;br&gt;
bg - Push the next job in the queue into the background&lt;br&gt;
bg %[number] - Push the job [number] into the background&lt;br&gt;
kill %[number] - Kill the job numbered [number]&lt;br&gt;
kill -[signal] %[number] - Send the signal [signal] to job number [number]&lt;br&gt;
disown %[number] - you won't be owner of process anymore so it will be alive after leaving terminal&lt;br&gt;
%vim &lt;br&gt;&lt;/div&gt;</description><category>Linux</category><guid>https://stencel.io/posts/linux-suspended-jobs.html</guid><pubDate>Sat, 17 May 2014 19:31:32 GMT</pubDate></item><item><title>running-scripts-in-background-linux</title><link>https://stencel.io/posts/running-scripts-in-background-linux.html</link><dc:creator>Greg Stencel</dc:creator><description>&lt;div&gt;&lt;p&gt;I used to execute a lot of commands with &amp;amp; at the end. But once I used plowshare and it didnt work because &amp;amp; works until
you wont log out .So my solution (I know I could use nohup :) ) was screen. Screen is the best tool admin can use when working
remotely. It can be usefull when you're in place with big packet loss and you often lost connection so when you're
restoring database  you should be in screen session because when something will disconnect you you can alwas log in and
connect to screen session in which restoring is taking place.&lt;/p&gt;
&lt;p&gt;So executing&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_0d90cf72a376442bb18c6a9a0c1175e8-1"&gt;&lt;/a&gt;$./my_script.sh &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;will be only running when your session is still active so when you'll logout it will be killed.&lt;/p&gt;
&lt;p&gt;To run it independent from your presence on server do it with nohup:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_92809d3a2898450d99eed922dfeb03f4-1"&gt;&lt;/a&gt;$ nohup ./my_script.sh &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;To launch screen :&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_b4450ae4d6ba42d99edc9d2fb7a818b9-1"&gt;&lt;/a&gt;$ screen
&lt;/pre&gt;&lt;p&gt;Best practice is to launch screen with its name :&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_27065407db19484d93bfa6b72008a4b6-1"&gt;&lt;/a&gt;$ screen -S my_own_screen_name
&lt;/pre&gt;Then if you want detach screen to get back later

&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;d&lt;/kbd&gt;

If you want terminate screen just
&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;d&lt;/kbd&gt; or exit&lt;p&gt;then you can resume it with:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_dfdd8264def6424b820eaab115805962-1"&gt;&lt;/a&gt;$ screen -r my_own_screen_name
&lt;/pre&gt;&lt;p&gt;To list all available screens :&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_8cf8cba0e91a4202a3da26ea8a810016-1"&gt;&lt;/a&gt;$ screen -ls
&lt;/pre&gt;&lt;p&gt;To attach to already attached screen:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_dbaf39056b5c47e9a2c1beb86b09c5cf-1"&gt;&lt;/a&gt;$ screen -x my_own_screen_name
&lt;/pre&gt;&lt;p&gt;To attach to attached screen and detach others:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_70630b7f079b4a64b24000e084fcfae1-1"&gt;&lt;/a&gt;$ screen -r -d my_own_screen_name
&lt;/pre&gt;&lt;p&gt;To rename existing screen:&lt;/p&gt;
(being attached):

&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;:sessionname my_screen_name&lt;kbd&gt;Enter&lt;/kbd&gt;&lt;/div&gt;</description><category>bash</category><category>Linux</category><guid>https://stencel.io/posts/running-scripts-in-background-linux.html</guid><pubDate>Tue, 13 May 2014 14:01:14 GMT</pubDate></item><item><title>shell_productivity</title><link>https://stencel.io/posts/shell_productivity.html</link><dc:creator>Greg Stencel</dc:creator><description>&lt;div class="section" id="bash-zsh-terminal-productivity"&gt;
&lt;h2&gt;Bash / ZSH Terminal productivity&lt;/h2&gt;
&lt;p&gt;:w&lt;/p&gt;
&lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;u&lt;/kbd&gt; clear whole line &lt;br&gt;
&lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;k&lt;/kbd&gt; clear everything after curson&lt;br&gt;
&lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;w&lt;/kbd&gt; clear everything before curson&lt;br&gt;
&lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt; set cursor at the beginning (home)&lt;br&gt;
&lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;e&lt;/kbd&gt; set cursor at the end (end)&lt;br&gt;
&lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;y&lt;/kbd&gt; undo last clear or repeat after second hit&lt;br&gt;
&lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;l&lt;/kbd&gt; clears screen &lt;br&gt;
&lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;r&lt;/kbd&gt; search in you history commands type twice to select next candidate&lt;br&gt;
&lt;kbd&gt;ESC&lt;/kbd&gt;&lt;kbd&gt;t&lt;/kbd&gt; Swap the last two words before the cursor&lt;br&gt;
&lt;kbd&gt;Alt&lt;/kbd&gt;&lt;kbd&gt;f&lt;/kbd&gt; Move cursor every word forward&lt;br&gt;
&lt;kbd&gt;Alt&lt;/kbd&gt;&lt;kbd&gt;b&lt;/kbd&gt; Move cursoor every word backward&lt;br&gt;
&lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;_&lt;/kbd&gt; Undo the last change&lt;/div&gt;</description><category>bash</category><category>bash shortcuts</category><category>shell productivity</category><category>zsh</category><category>zsh shortcuts</category><guid>https://stencel.io/posts/shell_productivity.html</guid><pubDate>Mon, 28 Apr 2014 12:11:12 GMT</pubDate></item></channel></rss>